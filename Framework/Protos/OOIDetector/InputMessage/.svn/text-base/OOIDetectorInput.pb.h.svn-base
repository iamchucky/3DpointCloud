// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_OOIDetectorInput_2eproto__INCLUDED
#define PROTOBUF_OOIDetectorInput_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

namespace Magic {
namespace OOIDetector {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OOIDetectorInput_2eproto();
void protobuf_AssignDesc_OOIDetectorInput_2eproto();
void protobuf_ShutdownFile_OOIDetectorInput_2eproto();

class OOIDetectorInput;
class OOIDetectorInput_Robotpose;
class OOIDetectorInput_ThreeDCoord;
class OOIDetectorInput_Point;

// ===================================================================

class OOIDetectorInput_Robotpose : public ::google::protobuf::Message {
 public:
  OOIDetectorInput_Robotpose();
  virtual ~OOIDetectorInput_Robotpose();
  
  OOIDetectorInput_Robotpose(const OOIDetectorInput_Robotpose& from);
  
  inline OOIDetectorInput_Robotpose& operator=(const OOIDetectorInput_Robotpose& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OOIDetectorInput_Robotpose& default_instance();
  void Swap(OOIDetectorInput_Robotpose* other);
  
  // implements Message ----------------------------------------------
  
  OOIDetectorInput_Robotpose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OOIDetectorInput_Robotpose& from);
  void MergeFrom(const OOIDetectorInput_Robotpose& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);
  
  // required double roll = 4;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 4;
  inline double roll() const;
  inline void set_roll(double value);
  
  // required double pitch = 5;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 5;
  inline double pitch() const;
  inline void set_pitch(double value);
  
  // required double yaw = 6;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 6;
  inline double yaw() const;
  inline void set_yaw(double value);
  
  // required double timestamp = 7;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 7;
  inline double timestamp() const;
  inline void set_timestamp(double value);
  
  // repeated double covariance = 8;
  inline int covariance_size() const;
  inline void clear_covariance();
  static const int kCovarianceFieldNumber = 8;
  inline const ::google::protobuf::RepeatedField< double >& covariance() const
      ;
  inline ::google::protobuf::RepeatedField< double >* mutable_covariance();
  inline double covariance(int index) const;
  inline void set_covariance(int index, double value);
  inline void add_covariance(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double x_;
  double y_;
  double z_;
  double roll_;
  double pitch_;
  double yaw_;
  double timestamp_;
  ::google::protobuf::RepeatedField< double > covariance_;
  friend void  protobuf_AddDesc_OOIDetectorInput_2eproto();
  friend void protobuf_AssignDesc_OOIDetectorInput_2eproto();
  friend void protobuf_ShutdownFile_OOIDetectorInput_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static OOIDetectorInput_Robotpose* default_instance_;
};
// -------------------------------------------------------------------

class OOIDetectorInput_ThreeDCoord : public ::google::protobuf::Message {
 public:
  OOIDetectorInput_ThreeDCoord();
  virtual ~OOIDetectorInput_ThreeDCoord();
  
  OOIDetectorInput_ThreeDCoord(const OOIDetectorInput_ThreeDCoord& from);
  
  inline OOIDetectorInput_ThreeDCoord& operator=(const OOIDetectorInput_ThreeDCoord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OOIDetectorInput_ThreeDCoord& default_instance();
  void Swap(OOIDetectorInput_ThreeDCoord* other);
  
  // implements Message ----------------------------------------------
  
  OOIDetectorInput_ThreeDCoord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OOIDetectorInput_ThreeDCoord& from);
  void MergeFrom(const OOIDetectorInput_ThreeDCoord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_OOIDetectorInput_2eproto();
  friend void protobuf_AssignDesc_OOIDetectorInput_2eproto();
  friend void protobuf_ShutdownFile_OOIDetectorInput_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static OOIDetectorInput_ThreeDCoord* default_instance_;
};
// -------------------------------------------------------------------

class OOIDetectorInput_Point : public ::google::protobuf::Message {
 public:
  OOIDetectorInput_Point();
  virtual ~OOIDetectorInput_Point();
  
  OOIDetectorInput_Point(const OOIDetectorInput_Point& from);
  
  inline OOIDetectorInput_Point& operator=(const OOIDetectorInput_Point& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OOIDetectorInput_Point& default_instance();
  void Swap(OOIDetectorInput_Point* other);
  
  // implements Message ----------------------------------------------
  
  OOIDetectorInput_Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OOIDetectorInput_Point& from);
  void MergeFrom(const OOIDetectorInput_Point& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Magic.OOIDetector.OOIDetectorInput.ThreeDCoord globalcoord = 1;
  inline bool has_globalcoord() const;
  inline void clear_globalcoord();
  static const int kGlobalcoordFieldNumber = 1;
  inline const ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord& globalcoord() const;
  inline ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord* mutable_globalcoord();
  
  // required .Magic.OOIDetector.OOIDetectorInput.ThreeDCoord robotcoord = 2;
  inline bool has_robotcoord() const;
  inline void clear_robotcoord();
  static const int kRobotcoordFieldNumber = 2;
  inline const ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord& robotcoord() const;
  inline ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord* mutable_robotcoord();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord* globalcoord_;
  ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord* robotcoord_;
  friend void  protobuf_AddDesc_OOIDetectorInput_2eproto();
  friend void protobuf_AssignDesc_OOIDetectorInput_2eproto();
  friend void protobuf_ShutdownFile_OOIDetectorInput_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static OOIDetectorInput_Point* default_instance_;
};
// -------------------------------------------------------------------

class OOIDetectorInput : public ::google::protobuf::Message {
 public:
  OOIDetectorInput();
  virtual ~OOIDetectorInput();
  
  OOIDetectorInput(const OOIDetectorInput& from);
  
  inline OOIDetectorInput& operator=(const OOIDetectorInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OOIDetectorInput& default_instance();
  void Swap(OOIDetectorInput* other);
  
  // implements Message ----------------------------------------------
  
  OOIDetectorInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OOIDetectorInput& from);
  void MergeFrom(const OOIDetectorInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OOIDetectorInput_Robotpose Robotpose;
  typedef OOIDetectorInput_ThreeDCoord ThreeDCoord;
  typedef OOIDetectorInput_Point Point;
  
  // accessors -------------------------------------------------------
  
  // required .Magic.OOIDetector.OOIDetectorInput.Robotpose pose = 1;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 1;
  inline const ::Magic::OOIDetector::OOIDetectorInput_Robotpose& pose() const;
  inline ::Magic::OOIDetector::OOIDetectorInput_Robotpose* mutable_pose();
  
  // repeated .Magic.OOIDetector.OOIDetectorInput.Point points = 2;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::Magic::OOIDetector::OOIDetectorInput_Point >& points() const;
  inline ::google::protobuf::RepeatedPtrField< ::Magic::OOIDetector::OOIDetectorInput_Point >* mutable_points();
  inline const ::Magic::OOIDetector::OOIDetectorInput_Point& points(int index) const;
  inline ::Magic::OOIDetector::OOIDetectorInput_Point* mutable_points(int index);
  inline ::Magic::OOIDetector::OOIDetectorInput_Point* add_points();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Magic::OOIDetector::OOIDetectorInput_Robotpose* pose_;
  ::google::protobuf::RepeatedPtrField< ::Magic::OOIDetector::OOIDetectorInput_Point > points_;
  friend void  protobuf_AddDesc_OOIDetectorInput_2eproto();
  friend void protobuf_AssignDesc_OOIDetectorInput_2eproto();
  friend void protobuf_ShutdownFile_OOIDetectorInput_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static OOIDetectorInput* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// OOIDetectorInput_Robotpose

// required double x = 1;
inline bool OOIDetectorInput_Robotpose::has_x() const {
  return _has_bit(0);
}
inline void OOIDetectorInput_Robotpose::clear_x() {
  x_ = 0;
  _clear_bit(0);
}
inline double OOIDetectorInput_Robotpose::x() const {
  return x_;
}
inline void OOIDetectorInput_Robotpose::set_x(double value) {
  _set_bit(0);
  x_ = value;
}

// required double y = 2;
inline bool OOIDetectorInput_Robotpose::has_y() const {
  return _has_bit(1);
}
inline void OOIDetectorInput_Robotpose::clear_y() {
  y_ = 0;
  _clear_bit(1);
}
inline double OOIDetectorInput_Robotpose::y() const {
  return y_;
}
inline void OOIDetectorInput_Robotpose::set_y(double value) {
  _set_bit(1);
  y_ = value;
}

// required double z = 3;
inline bool OOIDetectorInput_Robotpose::has_z() const {
  return _has_bit(2);
}
inline void OOIDetectorInput_Robotpose::clear_z() {
  z_ = 0;
  _clear_bit(2);
}
inline double OOIDetectorInput_Robotpose::z() const {
  return z_;
}
inline void OOIDetectorInput_Robotpose::set_z(double value) {
  _set_bit(2);
  z_ = value;
}

// required double roll = 4;
inline bool OOIDetectorInput_Robotpose::has_roll() const {
  return _has_bit(3);
}
inline void OOIDetectorInput_Robotpose::clear_roll() {
  roll_ = 0;
  _clear_bit(3);
}
inline double OOIDetectorInput_Robotpose::roll() const {
  return roll_;
}
inline void OOIDetectorInput_Robotpose::set_roll(double value) {
  _set_bit(3);
  roll_ = value;
}

// required double pitch = 5;
inline bool OOIDetectorInput_Robotpose::has_pitch() const {
  return _has_bit(4);
}
inline void OOIDetectorInput_Robotpose::clear_pitch() {
  pitch_ = 0;
  _clear_bit(4);
}
inline double OOIDetectorInput_Robotpose::pitch() const {
  return pitch_;
}
inline void OOIDetectorInput_Robotpose::set_pitch(double value) {
  _set_bit(4);
  pitch_ = value;
}

// required double yaw = 6;
inline bool OOIDetectorInput_Robotpose::has_yaw() const {
  return _has_bit(5);
}
inline void OOIDetectorInput_Robotpose::clear_yaw() {
  yaw_ = 0;
  _clear_bit(5);
}
inline double OOIDetectorInput_Robotpose::yaw() const {
  return yaw_;
}
inline void OOIDetectorInput_Robotpose::set_yaw(double value) {
  _set_bit(5);
  yaw_ = value;
}

// required double timestamp = 7;
inline bool OOIDetectorInput_Robotpose::has_timestamp() const {
  return _has_bit(6);
}
inline void OOIDetectorInput_Robotpose::clear_timestamp() {
  timestamp_ = 0;
  _clear_bit(6);
}
inline double OOIDetectorInput_Robotpose::timestamp() const {
  return timestamp_;
}
inline void OOIDetectorInput_Robotpose::set_timestamp(double value) {
  _set_bit(6);
  timestamp_ = value;
}

// repeated double covariance = 8;
inline int OOIDetectorInput_Robotpose::covariance_size() const {
  return covariance_.size();
}
inline void OOIDetectorInput_Robotpose::clear_covariance() {
  covariance_.Clear();
}
inline const ::google::protobuf::RepeatedField< double >&
OOIDetectorInput_Robotpose::covariance() const {
  return covariance_;
}
inline ::google::protobuf::RepeatedField< double >*
OOIDetectorInput_Robotpose::mutable_covariance() {
  return &covariance_;
}
inline double OOIDetectorInput_Robotpose::covariance(int index) const {
  return covariance_.Get(index);
}
inline void OOIDetectorInput_Robotpose::set_covariance(int index, double value) {
  covariance_.Set(index, value);
}
inline void OOIDetectorInput_Robotpose::add_covariance(double value) {
  covariance_.Add(value);
}

// -------------------------------------------------------------------

// OOIDetectorInput_ThreeDCoord

// required double x = 1;
inline bool OOIDetectorInput_ThreeDCoord::has_x() const {
  return _has_bit(0);
}
inline void OOIDetectorInput_ThreeDCoord::clear_x() {
  x_ = 0;
  _clear_bit(0);
}
inline double OOIDetectorInput_ThreeDCoord::x() const {
  return x_;
}
inline void OOIDetectorInput_ThreeDCoord::set_x(double value) {
  _set_bit(0);
  x_ = value;
}

// required double y = 2;
inline bool OOIDetectorInput_ThreeDCoord::has_y() const {
  return _has_bit(1);
}
inline void OOIDetectorInput_ThreeDCoord::clear_y() {
  y_ = 0;
  _clear_bit(1);
}
inline double OOIDetectorInput_ThreeDCoord::y() const {
  return y_;
}
inline void OOIDetectorInput_ThreeDCoord::set_y(double value) {
  _set_bit(1);
  y_ = value;
}

// required double z = 3;
inline bool OOIDetectorInput_ThreeDCoord::has_z() const {
  return _has_bit(2);
}
inline void OOIDetectorInput_ThreeDCoord::clear_z() {
  z_ = 0;
  _clear_bit(2);
}
inline double OOIDetectorInput_ThreeDCoord::z() const {
  return z_;
}
inline void OOIDetectorInput_ThreeDCoord::set_z(double value) {
  _set_bit(2);
  z_ = value;
}

// -------------------------------------------------------------------

// OOIDetectorInput_Point

// required .Magic.OOIDetector.OOIDetectorInput.ThreeDCoord globalcoord = 1;
inline bool OOIDetectorInput_Point::has_globalcoord() const {
  return _has_bit(0);
}
inline void OOIDetectorInput_Point::clear_globalcoord() {
  if (globalcoord_ != NULL) globalcoord_->::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord::Clear();
  _clear_bit(0);
}
inline const ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord& OOIDetectorInput_Point::globalcoord() const {
  return globalcoord_ != NULL ? *globalcoord_ : *default_instance_->globalcoord_;
}
inline ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord* OOIDetectorInput_Point::mutable_globalcoord() {
  _set_bit(0);
  if (globalcoord_ == NULL) globalcoord_ = new ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord;
  return globalcoord_;
}

// required .Magic.OOIDetector.OOIDetectorInput.ThreeDCoord robotcoord = 2;
inline bool OOIDetectorInput_Point::has_robotcoord() const {
  return _has_bit(1);
}
inline void OOIDetectorInput_Point::clear_robotcoord() {
  if (robotcoord_ != NULL) robotcoord_->::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord::Clear();
  _clear_bit(1);
}
inline const ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord& OOIDetectorInput_Point::robotcoord() const {
  return robotcoord_ != NULL ? *robotcoord_ : *default_instance_->robotcoord_;
}
inline ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord* OOIDetectorInput_Point::mutable_robotcoord() {
  _set_bit(1);
  if (robotcoord_ == NULL) robotcoord_ = new ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord;
  return robotcoord_;
}

// -------------------------------------------------------------------

// OOIDetectorInput

// required .Magic.OOIDetector.OOIDetectorInput.Robotpose pose = 1;
inline bool OOIDetectorInput::has_pose() const {
  return _has_bit(0);
}
inline void OOIDetectorInput::clear_pose() {
  if (pose_ != NULL) pose_->::Magic::OOIDetector::OOIDetectorInput_Robotpose::Clear();
  _clear_bit(0);
}
inline const ::Magic::OOIDetector::OOIDetectorInput_Robotpose& OOIDetectorInput::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::Magic::OOIDetector::OOIDetectorInput_Robotpose* OOIDetectorInput::mutable_pose() {
  _set_bit(0);
  if (pose_ == NULL) pose_ = new ::Magic::OOIDetector::OOIDetectorInput_Robotpose;
  return pose_;
}

// repeated .Magic.OOIDetector.OOIDetectorInput.Point points = 2;
inline int OOIDetectorInput::points_size() const {
  return points_.size();
}
inline void OOIDetectorInput::clear_points() {
  points_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Magic::OOIDetector::OOIDetectorInput_Point >&
OOIDetectorInput::points() const {
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::Magic::OOIDetector::OOIDetectorInput_Point >*
OOIDetectorInput::mutable_points() {
  return &points_;
}
inline const ::Magic::OOIDetector::OOIDetectorInput_Point& OOIDetectorInput::points(int index) const {
  return points_.Get(index);
}
inline ::Magic::OOIDetector::OOIDetectorInput_Point* OOIDetectorInput::mutable_points(int index) {
  return points_.Mutable(index);
}
inline ::Magic::OOIDetector::OOIDetectorInput_Point* OOIDetectorInput::add_points() {
  return points_.Add();
}


}  // namespace OOIDetector
}  // namespace Magic

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_OOIDetectorInput_2eproto__INCLUDED
