// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OOIDetectorInput.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace Magic {
namespace OOIDetector {

namespace {

const ::google::protobuf::Descriptor* OOIDetectorInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OOIDetectorInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* OOIDetectorInput_Robotpose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OOIDetectorInput_Robotpose_reflection_ = NULL;
const ::google::protobuf::Descriptor* OOIDetectorInput_ThreeDCoord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OOIDetectorInput_ThreeDCoord_reflection_ = NULL;
const ::google::protobuf::Descriptor* OOIDetectorInput_Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OOIDetectorInput_Point_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OOIDetectorInput_2eproto() {
  protobuf_AddDesc_OOIDetectorInput_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OOIDetectorInput.proto");
  GOOGLE_CHECK(file != NULL);
  OOIDetectorInput_descriptor_ = file->message_type(0);
  static const int OOIDetectorInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput, points_),
  };
  OOIDetectorInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OOIDetectorInput_descriptor_,
      OOIDetectorInput::default_instance_,
      OOIDetectorInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OOIDetectorInput));
  OOIDetectorInput_Robotpose_descriptor_ = OOIDetectorInput_descriptor_->nested_type(0);
  static const int OOIDetectorInput_Robotpose_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Robotpose, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Robotpose, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Robotpose, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Robotpose, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Robotpose, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Robotpose, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Robotpose, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Robotpose, covariance_),
  };
  OOIDetectorInput_Robotpose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OOIDetectorInput_Robotpose_descriptor_,
      OOIDetectorInput_Robotpose::default_instance_,
      OOIDetectorInput_Robotpose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Robotpose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Robotpose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OOIDetectorInput_Robotpose));
  OOIDetectorInput_ThreeDCoord_descriptor_ = OOIDetectorInput_descriptor_->nested_type(1);
  static const int OOIDetectorInput_ThreeDCoord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_ThreeDCoord, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_ThreeDCoord, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_ThreeDCoord, z_),
  };
  OOIDetectorInput_ThreeDCoord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OOIDetectorInput_ThreeDCoord_descriptor_,
      OOIDetectorInput_ThreeDCoord::default_instance_,
      OOIDetectorInput_ThreeDCoord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_ThreeDCoord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_ThreeDCoord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OOIDetectorInput_ThreeDCoord));
  OOIDetectorInput_Point_descriptor_ = OOIDetectorInput_descriptor_->nested_type(2);
  static const int OOIDetectorInput_Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Point, globalcoord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Point, robotcoord_),
  };
  OOIDetectorInput_Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OOIDetectorInput_Point_descriptor_,
      OOIDetectorInput_Point::default_instance_,
      OOIDetectorInput_Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorInput_Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OOIDetectorInput_Point));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OOIDetectorInput_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OOIDetectorInput_descriptor_, &OOIDetectorInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OOIDetectorInput_Robotpose_descriptor_, &OOIDetectorInput_Robotpose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OOIDetectorInput_ThreeDCoord_descriptor_, &OOIDetectorInput_ThreeDCoord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OOIDetectorInput_Point_descriptor_, &OOIDetectorInput_Point::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OOIDetectorInput_2eproto() {
  delete OOIDetectorInput::default_instance_;
  delete OOIDetectorInput_reflection_;
  delete OOIDetectorInput_Robotpose::default_instance_;
  delete OOIDetectorInput_Robotpose_reflection_;
  delete OOIDetectorInput_ThreeDCoord::default_instance_;
  delete OOIDetectorInput_ThreeDCoord_reflection_;
  delete OOIDetectorInput_Point::default_instance_;
  delete OOIDetectorInput_Point_reflection_;
}

void protobuf_AddDesc_OOIDetectorInput_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026OOIDetectorInput.proto\022\021Magic.OOIDetec"
    "tor\"\316\003\n\020OOIDetectorInput\022;\n\004pose\030\001 \002(\0132-"
    ".Magic.OOIDetector.OOIDetectorInput.Robo"
    "tpose\0229\n\006points\030\002 \003(\0132).Magic.OOIDetecto"
    "r.OOIDetectorInput.Point\032}\n\tRobotpose\022\t\n"
    "\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\022\014\n\004roll\030\004"
    " \002(\001\022\r\n\005pitch\030\005 \002(\001\022\013\n\003yaw\030\006 \002(\001\022\021\n\ttime"
    "stamp\030\007 \002(\001\022\022\n\ncovariance\030\010 \003(\001\032.\n\013Three"
    "DCoord\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\032"
    "\222\001\n\005Point\022D\n\013globalcoord\030\001 \002(\0132/.Magic.O"
    "OIDetector.OOIDetectorInput.ThreeDCoord\022"
    "C\n\nrobotcoord\030\002 \002(\0132/.Magic.OOIDetector."
    "OOIDetectorInput.ThreeDCoord", 508);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OOIDetectorInput.proto", &protobuf_RegisterTypes);
  OOIDetectorInput::default_instance_ = new OOIDetectorInput();
  OOIDetectorInput_Robotpose::default_instance_ = new OOIDetectorInput_Robotpose();
  OOIDetectorInput_ThreeDCoord::default_instance_ = new OOIDetectorInput_ThreeDCoord();
  OOIDetectorInput_Point::default_instance_ = new OOIDetectorInput_Point();
  OOIDetectorInput::default_instance_->InitAsDefaultInstance();
  OOIDetectorInput_Robotpose::default_instance_->InitAsDefaultInstance();
  OOIDetectorInput_ThreeDCoord::default_instance_->InitAsDefaultInstance();
  OOIDetectorInput_Point::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OOIDetectorInput_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OOIDetectorInput_2eproto {
  StaticDescriptorInitializer_OOIDetectorInput_2eproto() {
    protobuf_AddDesc_OOIDetectorInput_2eproto();
  }
} static_descriptor_initializer_OOIDetectorInput_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int OOIDetectorInput_Robotpose::kXFieldNumber;
const int OOIDetectorInput_Robotpose::kYFieldNumber;
const int OOIDetectorInput_Robotpose::kZFieldNumber;
const int OOIDetectorInput_Robotpose::kRollFieldNumber;
const int OOIDetectorInput_Robotpose::kPitchFieldNumber;
const int OOIDetectorInput_Robotpose::kYawFieldNumber;
const int OOIDetectorInput_Robotpose::kTimestampFieldNumber;
const int OOIDetectorInput_Robotpose::kCovarianceFieldNumber;
#endif  // !_MSC_VER

OOIDetectorInput_Robotpose::OOIDetectorInput_Robotpose() {
  SharedCtor();
}

void OOIDetectorInput_Robotpose::InitAsDefaultInstance() {
}

OOIDetectorInput_Robotpose::OOIDetectorInput_Robotpose(const OOIDetectorInput_Robotpose& from) {
  SharedCtor();
  MergeFrom(from);
}

void OOIDetectorInput_Robotpose::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OOIDetectorInput_Robotpose::~OOIDetectorInput_Robotpose() {
  SharedDtor();
}

void OOIDetectorInput_Robotpose::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* OOIDetectorInput_Robotpose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OOIDetectorInput_Robotpose_descriptor_;
}

const OOIDetectorInput_Robotpose& OOIDetectorInput_Robotpose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OOIDetectorInput_2eproto();  return *default_instance_;
}

OOIDetectorInput_Robotpose* OOIDetectorInput_Robotpose::default_instance_ = NULL;

OOIDetectorInput_Robotpose* OOIDetectorInput_Robotpose::New() const {
  return new OOIDetectorInput_Robotpose;
}

void OOIDetectorInput_Robotpose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    roll_ = 0;
    pitch_ = 0;
    yaw_ = 0;
    timestamp_ = 0;
  }
  covariance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OOIDetectorInput_Robotpose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x_));
        _set_bit(0);
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &y_));
        _set_bit(1);
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }
      
      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_z:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &z_));
        _set_bit(2);
        if (input->ExpectTag(33)) goto parse_roll;
        break;
      }
      
      // required double roll = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_roll:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &roll_));
        _set_bit(3);
        if (input->ExpectTag(41)) goto parse_pitch;
        break;
      }
      
      // required double pitch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_pitch:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &pitch_));
        _set_bit(4);
        if (input->ExpectTag(49)) goto parse_yaw;
        break;
      }
      
      // required double yaw = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_yaw:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &yaw_));
        _set_bit(5);
        if (input->ExpectTag(57)) goto parse_timestamp;
        break;
      }
      
      // required double timestamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_timestamp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &timestamp_));
        _set_bit(6);
        if (input->ExpectTag(65)) goto parse_covariance;
        break;
      }
      
      // repeated double covariance = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_covariance:
        double value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &value));
        add_covariance(value);
        if (input->ExpectTag(65)) goto parse_covariance;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OOIDetectorInput_Robotpose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OOIDetectorInput_Robotpose::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required double x = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // required double y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // required double z = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }
  
  // required double roll = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->roll(), output);
  }
  
  // required double pitch = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pitch(), output);
  }
  
  // required double yaw = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->yaw(), output);
  }
  
  // required double timestamp = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->timestamp(), output);
  }
  
  // repeated double covariance = 8;
  for (int i = 0; i < this->covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->covariance(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OOIDetectorInput_Robotpose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // required double y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // required double z = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }
  
  // required double roll = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->roll(), target);
  }
  
  // required double pitch = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pitch(), target);
  }
  
  // required double yaw = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->yaw(), target);
  }
  
  // required double timestamp = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->timestamp(), target);
  }
  
  // repeated double covariance = 8;
  for (int i = 0; i < this->covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->covariance(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OOIDetectorInput_Robotpose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }
    
    // required double roll = 4;
    if (has_roll()) {
      total_size += 1 + 8;
    }
    
    // required double pitch = 5;
    if (has_pitch()) {
      total_size += 1 + 8;
    }
    
    // required double yaw = 6;
    if (has_yaw()) {
      total_size += 1 + 8;
    }
    
    // required double timestamp = 7;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated double covariance = 8;
  {
    int data_size = 0;
    data_size = 8 * this->covariance_size();
    total_size += 1 * this->covariance_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OOIDetectorInput_Robotpose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OOIDetectorInput_Robotpose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OOIDetectorInput_Robotpose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OOIDetectorInput_Robotpose::MergeFrom(const OOIDetectorInput_Robotpose& from) {
  GOOGLE_CHECK_NE(&from, this);
  covariance_.MergeFrom(from.covariance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
    if (from._has_bit(2)) {
      set_z(from.z());
    }
    if (from._has_bit(3)) {
      set_roll(from.roll());
    }
    if (from._has_bit(4)) {
      set_pitch(from.pitch());
    }
    if (from._has_bit(5)) {
      set_yaw(from.yaw());
    }
    if (from._has_bit(6)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OOIDetectorInput_Robotpose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OOIDetectorInput_Robotpose::CopyFrom(const OOIDetectorInput_Robotpose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OOIDetectorInput_Robotpose::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void OOIDetectorInput_Robotpose::Swap(OOIDetectorInput_Robotpose* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(roll_, other->roll_);
    std::swap(pitch_, other->pitch_);
    std::swap(yaw_, other->yaw_);
    std::swap(timestamp_, other->timestamp_);
    covariance_.Swap(&other->covariance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OOIDetectorInput_Robotpose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OOIDetectorInput_Robotpose_descriptor_;
  metadata.reflection = OOIDetectorInput_Robotpose_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OOIDetectorInput_ThreeDCoord::kXFieldNumber;
const int OOIDetectorInput_ThreeDCoord::kYFieldNumber;
const int OOIDetectorInput_ThreeDCoord::kZFieldNumber;
#endif  // !_MSC_VER

OOIDetectorInput_ThreeDCoord::OOIDetectorInput_ThreeDCoord() {
  SharedCtor();
}

void OOIDetectorInput_ThreeDCoord::InitAsDefaultInstance() {
}

OOIDetectorInput_ThreeDCoord::OOIDetectorInput_ThreeDCoord(const OOIDetectorInput_ThreeDCoord& from) {
  SharedCtor();
  MergeFrom(from);
}

void OOIDetectorInput_ThreeDCoord::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OOIDetectorInput_ThreeDCoord::~OOIDetectorInput_ThreeDCoord() {
  SharedDtor();
}

void OOIDetectorInput_ThreeDCoord::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* OOIDetectorInput_ThreeDCoord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OOIDetectorInput_ThreeDCoord_descriptor_;
}

const OOIDetectorInput_ThreeDCoord& OOIDetectorInput_ThreeDCoord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OOIDetectorInput_2eproto();  return *default_instance_;
}

OOIDetectorInput_ThreeDCoord* OOIDetectorInput_ThreeDCoord::default_instance_ = NULL;

OOIDetectorInput_ThreeDCoord* OOIDetectorInput_ThreeDCoord::New() const {
  return new OOIDetectorInput_ThreeDCoord;
}

void OOIDetectorInput_ThreeDCoord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OOIDetectorInput_ThreeDCoord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &x_));
        _set_bit(0);
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &y_));
        _set_bit(1);
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }
      
      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_z:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &z_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OOIDetectorInput_ThreeDCoord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OOIDetectorInput_ThreeDCoord::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required double x = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // required double y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // required double z = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OOIDetectorInput_ThreeDCoord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // required double y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // required double z = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OOIDetectorInput_ThreeDCoord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OOIDetectorInput_ThreeDCoord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OOIDetectorInput_ThreeDCoord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OOIDetectorInput_ThreeDCoord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OOIDetectorInput_ThreeDCoord::MergeFrom(const OOIDetectorInput_ThreeDCoord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
    if (from._has_bit(2)) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OOIDetectorInput_ThreeDCoord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OOIDetectorInput_ThreeDCoord::CopyFrom(const OOIDetectorInput_ThreeDCoord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OOIDetectorInput_ThreeDCoord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void OOIDetectorInput_ThreeDCoord::Swap(OOIDetectorInput_ThreeDCoord* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OOIDetectorInput_ThreeDCoord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OOIDetectorInput_ThreeDCoord_descriptor_;
  metadata.reflection = OOIDetectorInput_ThreeDCoord_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OOIDetectorInput_Point::kGlobalcoordFieldNumber;
const int OOIDetectorInput_Point::kRobotcoordFieldNumber;
#endif  // !_MSC_VER

OOIDetectorInput_Point::OOIDetectorInput_Point() {
  SharedCtor();
}

void OOIDetectorInput_Point::InitAsDefaultInstance() {
  globalcoord_ = const_cast< ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord*>(&::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord::default_instance());
  robotcoord_ = const_cast< ::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord*>(&::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord::default_instance());
}

OOIDetectorInput_Point::OOIDetectorInput_Point(const OOIDetectorInput_Point& from) {
  SharedCtor();
  MergeFrom(from);
}

void OOIDetectorInput_Point::SharedCtor() {
  _cached_size_ = 0;
  globalcoord_ = NULL;
  robotcoord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OOIDetectorInput_Point::~OOIDetectorInput_Point() {
  SharedDtor();
}

void OOIDetectorInput_Point::SharedDtor() {
  if (this != default_instance_) {
    delete globalcoord_;
    delete robotcoord_;
  }
}

const ::google::protobuf::Descriptor* OOIDetectorInput_Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OOIDetectorInput_Point_descriptor_;
}

const OOIDetectorInput_Point& OOIDetectorInput_Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OOIDetectorInput_2eproto();  return *default_instance_;
}

OOIDetectorInput_Point* OOIDetectorInput_Point::default_instance_ = NULL;

OOIDetectorInput_Point* OOIDetectorInput_Point::New() const {
  return new OOIDetectorInput_Point;
}

void OOIDetectorInput_Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (globalcoord_ != NULL) globalcoord_->::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord::Clear();
    }
    if (_has_bit(1)) {
      if (robotcoord_ != NULL) robotcoord_->::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OOIDetectorInput_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Magic.OOIDetector.OOIDetectorInput.ThreeDCoord globalcoord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_globalcoord()));
        if (input->ExpectTag(18)) goto parse_robotcoord;
        break;
      }
      
      // required .Magic.OOIDetector.OOIDetectorInput.ThreeDCoord robotcoord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_robotcoord:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_robotcoord()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OOIDetectorInput_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OOIDetectorInput_Point::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Magic.OOIDetector.OOIDetectorInput.ThreeDCoord globalcoord = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->globalcoord(), output);
  }
  
  // required .Magic.OOIDetector.OOIDetectorInput.ThreeDCoord robotcoord = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->robotcoord(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OOIDetectorInput_Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Magic.OOIDetector.OOIDetectorInput.ThreeDCoord globalcoord = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->globalcoord(), target);
  }
  
  // required .Magic.OOIDetector.OOIDetectorInput.ThreeDCoord robotcoord = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->robotcoord(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OOIDetectorInput_Point::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Magic.OOIDetector.OOIDetectorInput.ThreeDCoord globalcoord = 1;
    if (has_globalcoord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->globalcoord());
    }
    
    // required .Magic.OOIDetector.OOIDetectorInput.ThreeDCoord robotcoord = 2;
    if (has_robotcoord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robotcoord());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OOIDetectorInput_Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OOIDetectorInput_Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OOIDetectorInput_Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OOIDetectorInput_Point::MergeFrom(const OOIDetectorInput_Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_globalcoord()->::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord::MergeFrom(from.globalcoord());
    }
    if (from._has_bit(1)) {
      mutable_robotcoord()->::Magic::OOIDetector::OOIDetectorInput_ThreeDCoord::MergeFrom(from.robotcoord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OOIDetectorInput_Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OOIDetectorInput_Point::CopyFrom(const OOIDetectorInput_Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OOIDetectorInput_Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_globalcoord()) {
    if (!this->globalcoord().IsInitialized()) return false;
  }
  if (has_robotcoord()) {
    if (!this->robotcoord().IsInitialized()) return false;
  }
  return true;
}

void OOIDetectorInput_Point::Swap(OOIDetectorInput_Point* other) {
  if (other != this) {
    std::swap(globalcoord_, other->globalcoord_);
    std::swap(robotcoord_, other->robotcoord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OOIDetectorInput_Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OOIDetectorInput_Point_descriptor_;
  metadata.reflection = OOIDetectorInput_Point_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OOIDetectorInput::kPoseFieldNumber;
const int OOIDetectorInput::kPointsFieldNumber;
#endif  // !_MSC_VER

OOIDetectorInput::OOIDetectorInput() {
  SharedCtor();
}

void OOIDetectorInput::InitAsDefaultInstance() {
  pose_ = const_cast< ::Magic::OOIDetector::OOIDetectorInput_Robotpose*>(&::Magic::OOIDetector::OOIDetectorInput_Robotpose::default_instance());
}

OOIDetectorInput::OOIDetectorInput(const OOIDetectorInput& from) {
  SharedCtor();
  MergeFrom(from);
}

void OOIDetectorInput::SharedCtor() {
  _cached_size_ = 0;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OOIDetectorInput::~OOIDetectorInput() {
  SharedDtor();
}

void OOIDetectorInput::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

const ::google::protobuf::Descriptor* OOIDetectorInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OOIDetectorInput_descriptor_;
}

const OOIDetectorInput& OOIDetectorInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OOIDetectorInput_2eproto();  return *default_instance_;
}

OOIDetectorInput* OOIDetectorInput::default_instance_ = NULL;

OOIDetectorInput* OOIDetectorInput::New() const {
  return new OOIDetectorInput;
}

void OOIDetectorInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (pose_ != NULL) pose_->::Magic::OOIDetector::OOIDetectorInput_Robotpose::Clear();
    }
  }
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OOIDetectorInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Magic.OOIDetector.OOIDetectorInput.Robotpose pose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_pose()));
        if (input->ExpectTag(18)) goto parse_points;
        break;
      }
      
      // repeated .Magic.OOIDetector.OOIDetectorInput.Point points = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_points:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_points()));
        if (input->ExpectTag(18)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OOIDetectorInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OOIDetectorInput::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Magic.OOIDetector.OOIDetectorInput.Robotpose pose = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->pose(), output);
  }
  
  // repeated .Magic.OOIDetector.OOIDetectorInput.Point points = 2;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->points(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OOIDetectorInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Magic.OOIDetector.OOIDetectorInput.Robotpose pose = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pose(), target);
  }
  
  // repeated .Magic.OOIDetector.OOIDetectorInput.Point points = 2;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->points(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OOIDetectorInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Magic.OOIDetector.OOIDetectorInput.Robotpose pose = 1;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
  }
  // repeated .Magic.OOIDetector.OOIDetectorInput.Point points = 2;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OOIDetectorInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OOIDetectorInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OOIDetectorInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OOIDetectorInput::MergeFrom(const OOIDetectorInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_pose()->::Magic::OOIDetector::OOIDetectorInput_Robotpose::MergeFrom(from.pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OOIDetectorInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OOIDetectorInput::CopyFrom(const OOIDetectorInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OOIDetectorInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void OOIDetectorInput::Swap(OOIDetectorInput* other) {
  if (other != this) {
    std::swap(pose_, other->pose_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OOIDetectorInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OOIDetectorInput_descriptor_;
  metadata.reflection = OOIDetectorInput_reflection_;
  return metadata;
}


}  // namespace OOIDetector
}  // namespace Magic
