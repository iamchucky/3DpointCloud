// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OOIDetectorTarget.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace Magic {
namespace OOIDetector {

namespace {

const ::google::protobuf::Descriptor* OOIDetectorTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OOIDetectorTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* OOIDetectorTarget_Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OOIDetectorTarget_Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* OOIDetectorTarget_BBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OOIDetectorTarget_BBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* OOIDetectorTarget_MiddlePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OOIDetectorTarget_MiddlePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* OOIDetectorTarget_Blob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OOIDetectorTarget_Blob_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OOIDetectorTarget_2eproto() {
  protobuf_AddDesc_OOIDetectorTarget_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OOIDetectorTarget.proto");
  GOOGLE_CHECK(file != NULL);
  OOIDetectorTarget_descriptor_ = file->message_type(0);
  static const int OOIDetectorTarget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget, oois_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget, timestamp_),
  };
  OOIDetectorTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OOIDetectorTarget_descriptor_,
      OOIDetectorTarget::default_instance_,
      OOIDetectorTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OOIDetectorTarget));
  OOIDetectorTarget_Point_descriptor_ = OOIDetectorTarget_descriptor_->nested_type(0);
  static const int OOIDetectorTarget_Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_Point, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_Point, v_),
  };
  OOIDetectorTarget_Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OOIDetectorTarget_Point_descriptor_,
      OOIDetectorTarget_Point::default_instance_,
      OOIDetectorTarget_Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OOIDetectorTarget_Point));
  OOIDetectorTarget_BBox_descriptor_ = OOIDetectorTarget_descriptor_->nested_type(1);
  static const int OOIDetectorTarget_BBox_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_BBox, tlx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_BBox, tly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_BBox, brx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_BBox, bry_),
  };
  OOIDetectorTarget_BBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OOIDetectorTarget_BBox_descriptor_,
      OOIDetectorTarget_BBox::default_instance_,
      OOIDetectorTarget_BBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_BBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_BBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OOIDetectorTarget_BBox));
  OOIDetectorTarget_MiddlePoint_descriptor_ = OOIDetectorTarget_descriptor_->nested_type(2);
  static const int OOIDetectorTarget_MiddlePoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_MiddlePoint, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_MiddlePoint, upix_),
  };
  OOIDetectorTarget_MiddlePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OOIDetectorTarget_MiddlePoint_descriptor_,
      OOIDetectorTarget_MiddlePoint::default_instance_,
      OOIDetectorTarget_MiddlePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_MiddlePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_MiddlePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OOIDetectorTarget_MiddlePoint));
  OOIDetectorTarget_Blob_descriptor_ = OOIDetectorTarget_descriptor_->nested_type(3);
  static const int OOIDetectorTarget_Blob_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_Blob, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_Blob, bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_Blob, ooitype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_Blob, middlepoints_),
  };
  OOIDetectorTarget_Blob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OOIDetectorTarget_Blob_descriptor_,
      OOIDetectorTarget_Blob::default_instance_,
      OOIDetectorTarget_Blob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_Blob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OOIDetectorTarget_Blob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OOIDetectorTarget_Blob));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OOIDetectorTarget_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OOIDetectorTarget_descriptor_, &OOIDetectorTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OOIDetectorTarget_Point_descriptor_, &OOIDetectorTarget_Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OOIDetectorTarget_BBox_descriptor_, &OOIDetectorTarget_BBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OOIDetectorTarget_MiddlePoint_descriptor_, &OOIDetectorTarget_MiddlePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OOIDetectorTarget_Blob_descriptor_, &OOIDetectorTarget_Blob::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OOIDetectorTarget_2eproto() {
  delete OOIDetectorTarget::default_instance_;
  delete OOIDetectorTarget_reflection_;
  delete OOIDetectorTarget_Point::default_instance_;
  delete OOIDetectorTarget_Point_reflection_;
  delete OOIDetectorTarget_BBox::default_instance_;
  delete OOIDetectorTarget_BBox_reflection_;
  delete OOIDetectorTarget_MiddlePoint::default_instance_;
  delete OOIDetectorTarget_MiddlePoint_reflection_;
  delete OOIDetectorTarget_Blob::default_instance_;
  delete OOIDetectorTarget_Blob_reflection_;
}

void protobuf_AddDesc_OOIDetectorTarget_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027OOIDetectorTarget.proto\022\021Magic.OOIDete"
    "ctor\"\272\003\n\021OOIDetectorTarget\0227\n\004oois\030\001 \003(\013"
    "2).Magic.OOIDetector.OOIDetectorTarget.B"
    "lob\022\021\n\ttimeStamp\030\002 \002(\001\032\035\n\005Point\022\t\n\001u\030\001 \002"
    "(\001\022\t\n\001v\030\002 \002(\001\032:\n\004BBox\022\013\n\003tlx\030\001 \002(\005\022\013\n\003tl"
    "y\030\002 \002(\005\022\013\n\003brx\030\003 \002(\005\022\013\n\003bry\030\004 \002(\005\032&\n\013Mid"
    "dlePoint\022\t\n\001R\030\001 \002(\005\022\014\n\004uPix\030\002 \002(\005\032\325\001\n\004Bl"
    "ob\022:\n\006center\030\001 \002(\0132*.Magic.OOIDetector.O"
    "OIDetectorTarget.Point\0228\n\005bound\030\002 \002(\0132)."
    "Magic.OOIDetector.OOIDetectorTarget.BBox"
    "\022\017\n\007ooitype\030\003 \001(\t\022F\n\014middlePoints\030\004 \003(\0132"
    "0.Magic.OOIDetector.OOIDetectorTarget.Mi"
    "ddlePoint", 489);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OOIDetectorTarget.proto", &protobuf_RegisterTypes);
  OOIDetectorTarget::default_instance_ = new OOIDetectorTarget();
  OOIDetectorTarget_Point::default_instance_ = new OOIDetectorTarget_Point();
  OOIDetectorTarget_BBox::default_instance_ = new OOIDetectorTarget_BBox();
  OOIDetectorTarget_MiddlePoint::default_instance_ = new OOIDetectorTarget_MiddlePoint();
  OOIDetectorTarget_Blob::default_instance_ = new OOIDetectorTarget_Blob();
  OOIDetectorTarget::default_instance_->InitAsDefaultInstance();
  OOIDetectorTarget_Point::default_instance_->InitAsDefaultInstance();
  OOIDetectorTarget_BBox::default_instance_->InitAsDefaultInstance();
  OOIDetectorTarget_MiddlePoint::default_instance_->InitAsDefaultInstance();
  OOIDetectorTarget_Blob::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OOIDetectorTarget_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OOIDetectorTarget_2eproto {
  StaticDescriptorInitializer_OOIDetectorTarget_2eproto() {
    protobuf_AddDesc_OOIDetectorTarget_2eproto();
  }
} static_descriptor_initializer_OOIDetectorTarget_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int OOIDetectorTarget_Point::kUFieldNumber;
const int OOIDetectorTarget_Point::kVFieldNumber;
#endif  // !_MSC_VER

OOIDetectorTarget_Point::OOIDetectorTarget_Point() {
  SharedCtor();
}

void OOIDetectorTarget_Point::InitAsDefaultInstance() {
}

OOIDetectorTarget_Point::OOIDetectorTarget_Point(const OOIDetectorTarget_Point& from) {
  SharedCtor();
  MergeFrom(from);
}

void OOIDetectorTarget_Point::SharedCtor() {
  _cached_size_ = 0;
  u_ = 0;
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OOIDetectorTarget_Point::~OOIDetectorTarget_Point() {
  SharedDtor();
}

void OOIDetectorTarget_Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* OOIDetectorTarget_Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OOIDetectorTarget_Point_descriptor_;
}

const OOIDetectorTarget_Point& OOIDetectorTarget_Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OOIDetectorTarget_2eproto();  return *default_instance_;
}

OOIDetectorTarget_Point* OOIDetectorTarget_Point::default_instance_ = NULL;

OOIDetectorTarget_Point* OOIDetectorTarget_Point::New() const {
  return new OOIDetectorTarget_Point;
}

void OOIDetectorTarget_Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    u_ = 0;
    v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OOIDetectorTarget_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double u = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &u_));
        _set_bit(0);
        if (input->ExpectTag(17)) goto parse_v;
        break;
      }
      
      // required double v = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_v:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &v_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OOIDetectorTarget_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OOIDetectorTarget_Point::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required double u = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->u(), output);
  }
  
  // required double v = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OOIDetectorTarget_Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double u = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->u(), target);
  }
  
  // required double v = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OOIDetectorTarget_Point::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double u = 1;
    if (has_u()) {
      total_size += 1 + 8;
    }
    
    // required double v = 2;
    if (has_v()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OOIDetectorTarget_Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OOIDetectorTarget_Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OOIDetectorTarget_Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OOIDetectorTarget_Point::MergeFrom(const OOIDetectorTarget_Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_u(from.u());
    }
    if (from._has_bit(1)) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OOIDetectorTarget_Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OOIDetectorTarget_Point::CopyFrom(const OOIDetectorTarget_Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OOIDetectorTarget_Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OOIDetectorTarget_Point::Swap(OOIDetectorTarget_Point* other) {
  if (other != this) {
    std::swap(u_, other->u_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OOIDetectorTarget_Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OOIDetectorTarget_Point_descriptor_;
  metadata.reflection = OOIDetectorTarget_Point_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OOIDetectorTarget_BBox::kTlxFieldNumber;
const int OOIDetectorTarget_BBox::kTlyFieldNumber;
const int OOIDetectorTarget_BBox::kBrxFieldNumber;
const int OOIDetectorTarget_BBox::kBryFieldNumber;
#endif  // !_MSC_VER

OOIDetectorTarget_BBox::OOIDetectorTarget_BBox() {
  SharedCtor();
}

void OOIDetectorTarget_BBox::InitAsDefaultInstance() {
}

OOIDetectorTarget_BBox::OOIDetectorTarget_BBox(const OOIDetectorTarget_BBox& from) {
  SharedCtor();
  MergeFrom(from);
}

void OOIDetectorTarget_BBox::SharedCtor() {
  _cached_size_ = 0;
  tlx_ = 0;
  tly_ = 0;
  brx_ = 0;
  bry_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OOIDetectorTarget_BBox::~OOIDetectorTarget_BBox() {
  SharedDtor();
}

void OOIDetectorTarget_BBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* OOIDetectorTarget_BBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OOIDetectorTarget_BBox_descriptor_;
}

const OOIDetectorTarget_BBox& OOIDetectorTarget_BBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OOIDetectorTarget_2eproto();  return *default_instance_;
}

OOIDetectorTarget_BBox* OOIDetectorTarget_BBox::default_instance_ = NULL;

OOIDetectorTarget_BBox* OOIDetectorTarget_BBox::New() const {
  return new OOIDetectorTarget_BBox;
}

void OOIDetectorTarget_BBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tlx_ = 0;
    tly_ = 0;
    brx_ = 0;
    bry_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OOIDetectorTarget_BBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tlx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tlx_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_tly;
        break;
      }
      
      // required int32 tly = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tly:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tly_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_brx;
        break;
      }
      
      // required int32 brx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_brx:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &brx_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_bry;
        break;
      }
      
      // required int32 bry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bry:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bry_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OOIDetectorTarget_BBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OOIDetectorTarget_BBox::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 tlx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tlx(), output);
  }
  
  // required int32 tly = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tly(), output);
  }
  
  // required int32 brx = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->brx(), output);
  }
  
  // required int32 bry = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bry(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OOIDetectorTarget_BBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tlx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tlx(), target);
  }
  
  // required int32 tly = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tly(), target);
  }
  
  // required int32 brx = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->brx(), target);
  }
  
  // required int32 bry = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bry(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OOIDetectorTarget_BBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tlx = 1;
    if (has_tlx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlx());
    }
    
    // required int32 tly = 2;
    if (has_tly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tly());
    }
    
    // required int32 brx = 3;
    if (has_brx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brx());
    }
    
    // required int32 bry = 4;
    if (has_bry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bry());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OOIDetectorTarget_BBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OOIDetectorTarget_BBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OOIDetectorTarget_BBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OOIDetectorTarget_BBox::MergeFrom(const OOIDetectorTarget_BBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tlx(from.tlx());
    }
    if (from._has_bit(1)) {
      set_tly(from.tly());
    }
    if (from._has_bit(2)) {
      set_brx(from.brx());
    }
    if (from._has_bit(3)) {
      set_bry(from.bry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OOIDetectorTarget_BBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OOIDetectorTarget_BBox::CopyFrom(const OOIDetectorTarget_BBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OOIDetectorTarget_BBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void OOIDetectorTarget_BBox::Swap(OOIDetectorTarget_BBox* other) {
  if (other != this) {
    std::swap(tlx_, other->tlx_);
    std::swap(tly_, other->tly_);
    std::swap(brx_, other->brx_);
    std::swap(bry_, other->bry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OOIDetectorTarget_BBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OOIDetectorTarget_BBox_descriptor_;
  metadata.reflection = OOIDetectorTarget_BBox_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OOIDetectorTarget_MiddlePoint::kRFieldNumber;
const int OOIDetectorTarget_MiddlePoint::kUPixFieldNumber;
#endif  // !_MSC_VER

OOIDetectorTarget_MiddlePoint::OOIDetectorTarget_MiddlePoint() {
  SharedCtor();
}

void OOIDetectorTarget_MiddlePoint::InitAsDefaultInstance() {
}

OOIDetectorTarget_MiddlePoint::OOIDetectorTarget_MiddlePoint(const OOIDetectorTarget_MiddlePoint& from) {
  SharedCtor();
  MergeFrom(from);
}

void OOIDetectorTarget_MiddlePoint::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  upix_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OOIDetectorTarget_MiddlePoint::~OOIDetectorTarget_MiddlePoint() {
  SharedDtor();
}

void OOIDetectorTarget_MiddlePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* OOIDetectorTarget_MiddlePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OOIDetectorTarget_MiddlePoint_descriptor_;
}

const OOIDetectorTarget_MiddlePoint& OOIDetectorTarget_MiddlePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OOIDetectorTarget_2eproto();  return *default_instance_;
}

OOIDetectorTarget_MiddlePoint* OOIDetectorTarget_MiddlePoint::default_instance_ = NULL;

OOIDetectorTarget_MiddlePoint* OOIDetectorTarget_MiddlePoint::New() const {
  return new OOIDetectorTarget_MiddlePoint;
}

void OOIDetectorTarget_MiddlePoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 0;
    upix_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OOIDetectorTarget_MiddlePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 R = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &r_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_uPix;
        break;
      }
      
      // required int32 uPix = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_uPix:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &upix_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OOIDetectorTarget_MiddlePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OOIDetectorTarget_MiddlePoint::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 R = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }
  
  // required int32 uPix = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upix(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OOIDetectorTarget_MiddlePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 R = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }
  
  // required int32 uPix = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upix(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OOIDetectorTarget_MiddlePoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 R = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }
    
    // required int32 uPix = 2;
    if (has_upix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upix());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OOIDetectorTarget_MiddlePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OOIDetectorTarget_MiddlePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OOIDetectorTarget_MiddlePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OOIDetectorTarget_MiddlePoint::MergeFrom(const OOIDetectorTarget_MiddlePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_r(from.r());
    }
    if (from._has_bit(1)) {
      set_upix(from.upix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OOIDetectorTarget_MiddlePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OOIDetectorTarget_MiddlePoint::CopyFrom(const OOIDetectorTarget_MiddlePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OOIDetectorTarget_MiddlePoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OOIDetectorTarget_MiddlePoint::Swap(OOIDetectorTarget_MiddlePoint* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(upix_, other->upix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OOIDetectorTarget_MiddlePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OOIDetectorTarget_MiddlePoint_descriptor_;
  metadata.reflection = OOIDetectorTarget_MiddlePoint_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string OOIDetectorTarget_Blob::_default_ooitype_;
#ifndef _MSC_VER
const int OOIDetectorTarget_Blob::kCenterFieldNumber;
const int OOIDetectorTarget_Blob::kBoundFieldNumber;
const int OOIDetectorTarget_Blob::kOoitypeFieldNumber;
const int OOIDetectorTarget_Blob::kMiddlePointsFieldNumber;
#endif  // !_MSC_VER

OOIDetectorTarget_Blob::OOIDetectorTarget_Blob() {
  SharedCtor();
}

void OOIDetectorTarget_Blob::InitAsDefaultInstance() {
  center_ = const_cast< ::Magic::OOIDetector::OOIDetectorTarget_Point*>(&::Magic::OOIDetector::OOIDetectorTarget_Point::default_instance());
  bound_ = const_cast< ::Magic::OOIDetector::OOIDetectorTarget_BBox*>(&::Magic::OOIDetector::OOIDetectorTarget_BBox::default_instance());
}

OOIDetectorTarget_Blob::OOIDetectorTarget_Blob(const OOIDetectorTarget_Blob& from) {
  SharedCtor();
  MergeFrom(from);
}

void OOIDetectorTarget_Blob::SharedCtor() {
  _cached_size_ = 0;
  center_ = NULL;
  bound_ = NULL;
  ooitype_ = const_cast< ::std::string*>(&_default_ooitype_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OOIDetectorTarget_Blob::~OOIDetectorTarget_Blob() {
  SharedDtor();
}

void OOIDetectorTarget_Blob::SharedDtor() {
  if (ooitype_ != &_default_ooitype_) {
    delete ooitype_;
  }
  if (this != default_instance_) {
    delete center_;
    delete bound_;
  }
}

const ::google::protobuf::Descriptor* OOIDetectorTarget_Blob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OOIDetectorTarget_Blob_descriptor_;
}

const OOIDetectorTarget_Blob& OOIDetectorTarget_Blob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OOIDetectorTarget_2eproto();  return *default_instance_;
}

OOIDetectorTarget_Blob* OOIDetectorTarget_Blob::default_instance_ = NULL;

OOIDetectorTarget_Blob* OOIDetectorTarget_Blob::New() const {
  return new OOIDetectorTarget_Blob;
}

void OOIDetectorTarget_Blob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (center_ != NULL) center_->::Magic::OOIDetector::OOIDetectorTarget_Point::Clear();
    }
    if (_has_bit(1)) {
      if (bound_ != NULL) bound_->::Magic::OOIDetector::OOIDetectorTarget_BBox::Clear();
    }
    if (_has_bit(2)) {
      if (ooitype_ != &_default_ooitype_) {
        ooitype_->clear();
      }
    }
  }
  middlepoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OOIDetectorTarget_Blob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Magic.OOIDetector.OOIDetectorTarget.Point center = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_center()));
        if (input->ExpectTag(18)) goto parse_bound;
        break;
      }
      
      // required .Magic.OOIDetector.OOIDetectorTarget.BBox bound = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_bound:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_bound()));
        if (input->ExpectTag(26)) goto parse_ooitype;
        break;
      }
      
      // optional string ooitype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ooitype:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_ooitype()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->ooitype().data(), this->ooitype().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_middlePoints;
        break;
      }
      
      // repeated .Magic.OOIDetector.OOIDetectorTarget.MiddlePoint middlePoints = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_middlePoints:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_middlepoints()));
        if (input->ExpectTag(34)) goto parse_middlePoints;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OOIDetectorTarget_Blob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OOIDetectorTarget_Blob::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Magic.OOIDetector.OOIDetectorTarget.Point center = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->center(), output);
  }
  
  // required .Magic.OOIDetector.OOIDetectorTarget.BBox bound = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->bound(), output);
  }
  
  // optional string ooitype = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ooitype().data(), this->ooitype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ooitype(), output);
  }
  
  // repeated .Magic.OOIDetector.OOIDetectorTarget.MiddlePoint middlePoints = 4;
  for (int i = 0; i < this->middlepoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->middlepoints(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OOIDetectorTarget_Blob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Magic.OOIDetector.OOIDetectorTarget.Point center = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->center(), target);
  }
  
  // required .Magic.OOIDetector.OOIDetectorTarget.BBox bound = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bound(), target);
  }
  
  // optional string ooitype = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ooitype().data(), this->ooitype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ooitype(), target);
  }
  
  // repeated .Magic.OOIDetector.OOIDetectorTarget.MiddlePoint middlePoints = 4;
  for (int i = 0; i < this->middlepoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->middlepoints(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OOIDetectorTarget_Blob::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Magic.OOIDetector.OOIDetectorTarget.Point center = 1;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }
    
    // required .Magic.OOIDetector.OOIDetectorTarget.BBox bound = 2;
    if (has_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bound());
    }
    
    // optional string ooitype = 3;
    if (has_ooitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ooitype());
    }
    
  }
  // repeated .Magic.OOIDetector.OOIDetectorTarget.MiddlePoint middlePoints = 4;
  total_size += 1 * this->middlepoints_size();
  for (int i = 0; i < this->middlepoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->middlepoints(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OOIDetectorTarget_Blob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OOIDetectorTarget_Blob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OOIDetectorTarget_Blob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OOIDetectorTarget_Blob::MergeFrom(const OOIDetectorTarget_Blob& from) {
  GOOGLE_CHECK_NE(&from, this);
  middlepoints_.MergeFrom(from.middlepoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_center()->::Magic::OOIDetector::OOIDetectorTarget_Point::MergeFrom(from.center());
    }
    if (from._has_bit(1)) {
      mutable_bound()->::Magic::OOIDetector::OOIDetectorTarget_BBox::MergeFrom(from.bound());
    }
    if (from._has_bit(2)) {
      set_ooitype(from.ooitype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OOIDetectorTarget_Blob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OOIDetectorTarget_Blob::CopyFrom(const OOIDetectorTarget_Blob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OOIDetectorTarget_Blob::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_center()) {
    if (!this->center().IsInitialized()) return false;
  }
  if (has_bound()) {
    if (!this->bound().IsInitialized()) return false;
  }
  for (int i = 0; i < middlepoints_size(); i++) {
    if (!this->middlepoints(i).IsInitialized()) return false;
  }
  return true;
}

void OOIDetectorTarget_Blob::Swap(OOIDetectorTarget_Blob* other) {
  if (other != this) {
    std::swap(center_, other->center_);
    std::swap(bound_, other->bound_);
    std::swap(ooitype_, other->ooitype_);
    middlepoints_.Swap(&other->middlepoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OOIDetectorTarget_Blob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OOIDetectorTarget_Blob_descriptor_;
  metadata.reflection = OOIDetectorTarget_Blob_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OOIDetectorTarget::kOoisFieldNumber;
const int OOIDetectorTarget::kTimeStampFieldNumber;
#endif  // !_MSC_VER

OOIDetectorTarget::OOIDetectorTarget() {
  SharedCtor();
}

void OOIDetectorTarget::InitAsDefaultInstance() {
}

OOIDetectorTarget::OOIDetectorTarget(const OOIDetectorTarget& from) {
  SharedCtor();
  MergeFrom(from);
}

void OOIDetectorTarget::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OOIDetectorTarget::~OOIDetectorTarget() {
  SharedDtor();
}

void OOIDetectorTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* OOIDetectorTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OOIDetectorTarget_descriptor_;
}

const OOIDetectorTarget& OOIDetectorTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OOIDetectorTarget_2eproto();  return *default_instance_;
}

OOIDetectorTarget* OOIDetectorTarget::default_instance_ = NULL;

OOIDetectorTarget* OOIDetectorTarget::New() const {
  return new OOIDetectorTarget;
}

void OOIDetectorTarget::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    timestamp_ = 0;
  }
  oois_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OOIDetectorTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Magic.OOIDetector.OOIDetectorTarget.Blob oois = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_oois:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_oois()));
        if (input->ExpectTag(10)) goto parse_oois;
        if (input->ExpectTag(17)) goto parse_timeStamp;
        break;
      }
      
      // required double timeStamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_timeStamp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &timestamp_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OOIDetectorTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OOIDetectorTarget::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Magic.OOIDetector.OOIDetectorTarget.Blob oois = 1;
  for (int i = 0; i < this->oois_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->oois(i), output);
  }
  
  // required double timeStamp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OOIDetectorTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Magic.OOIDetector.OOIDetectorTarget.Blob oois = 1;
  for (int i = 0; i < this->oois_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->oois(i), target);
  }
  
  // required double timeStamp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OOIDetectorTarget::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required double timeStamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .Magic.OOIDetector.OOIDetectorTarget.Blob oois = 1;
  total_size += 1 * this->oois_size();
  for (int i = 0; i < this->oois_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->oois(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OOIDetectorTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OOIDetectorTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OOIDetectorTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OOIDetectorTarget::MergeFrom(const OOIDetectorTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  oois_.MergeFrom(from.oois_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OOIDetectorTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OOIDetectorTarget::CopyFrom(const OOIDetectorTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OOIDetectorTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < oois_size(); i++) {
    if (!this->oois(i).IsInitialized()) return false;
  }
  return true;
}

void OOIDetectorTarget::Swap(OOIDetectorTarget* other) {
  if (other != this) {
    oois_.Swap(&other->oois_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OOIDetectorTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OOIDetectorTarget_descriptor_;
  metadata.reflection = OOIDetectorTarget_reflection_;
  return metadata;
}


}  // namespace OOIDetector
}  // namespace Magic
