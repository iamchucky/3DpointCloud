// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messageExample.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace Magic {
namespace Sensors {

namespace {

const ::google::protobuf::Descriptor* ExampleMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExampleMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExampleMessage_StatusCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExampleMessage_StatusCode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExampleMessage_SensorType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messageExample_2eproto() {
  protobuf_AddDesc_messageExample_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messageExample.proto");
  GOOGLE_CHECK(file != NULL);
  ExampleMessage_descriptor_ = file->message_type(0);
  static const int ExampleMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleMessage, robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleMessage, codes_),
  };
  ExampleMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExampleMessage_descriptor_,
      ExampleMessage::default_instance_,
      ExampleMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExampleMessage));
  ExampleMessage_StatusCode_descriptor_ = ExampleMessage_descriptor_->nested_type(0);
  static const int ExampleMessage_StatusCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleMessage_StatusCode, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleMessage_StatusCode, type_),
  };
  ExampleMessage_StatusCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExampleMessage_StatusCode_descriptor_,
      ExampleMessage_StatusCode::default_instance_,
      ExampleMessage_StatusCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleMessage_StatusCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleMessage_StatusCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExampleMessage_StatusCode));
  ExampleMessage_SensorType_descriptor_ = ExampleMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messageExample_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExampleMessage_descriptor_, &ExampleMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExampleMessage_StatusCode_descriptor_, &ExampleMessage_StatusCode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messageExample_2eproto() {
  delete ExampleMessage::default_instance_;
  delete ExampleMessage_reflection_;
  delete ExampleMessage_StatusCode::default_instance_;
  delete ExampleMessage_StatusCode_reflection_;
}

void protobuf_AddDesc_messageExample_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024messageExample.proto\022\rMagic.Sensors\"\374\001"
    "\n\016ExampleMessage\022\r\n\005robot\030\001 \002(\t\022\n\n\002id\030\002 "
    "\002(\005\022\014\n\004name\030\003 \001(\t\0227\n\005codes\030\004 \003(\0132(.Magic"
    ".Sensors.ExampleMessage.StatusCode\032[\n\nSt"
    "atusCode\022\016\n\006number\030\001 \002(\t\022=\n\004type\030\002 \001(\0162("
    ".Magic.Sensors.ExampleMessage.SensorType"
    ":\005LIDAR\"+\n\nSensorType\022\t\n\005LIDAR\020\000\022\t\n\005RADA"
    "R\020\001\022\007\n\003GPS\020\002", 292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messageExample.proto", &protobuf_RegisterTypes);
  ExampleMessage::default_instance_ = new ExampleMessage();
  ExampleMessage_StatusCode::default_instance_ = new ExampleMessage_StatusCode();
  ExampleMessage::default_instance_->InitAsDefaultInstance();
  ExampleMessage_StatusCode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messageExample_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messageExample_2eproto {
  StaticDescriptorInitializer_messageExample_2eproto() {
    protobuf_AddDesc_messageExample_2eproto();
  }
} static_descriptor_initializer_messageExample_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExampleMessage_SensorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExampleMessage_SensorType_descriptor_;
}
bool ExampleMessage_SensorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExampleMessage_SensorType ExampleMessage::LIDAR;
const ExampleMessage_SensorType ExampleMessage::RADAR;
const ExampleMessage_SensorType ExampleMessage::GPS;
const ExampleMessage_SensorType ExampleMessage::SensorType_MIN;
const ExampleMessage_SensorType ExampleMessage::SensorType_MAX;
#endif  // _MSC_VER
const ::std::string ExampleMessage_StatusCode::_default_number_;
#ifndef _MSC_VER
const int ExampleMessage_StatusCode::kNumberFieldNumber;
const int ExampleMessage_StatusCode::kTypeFieldNumber;
#endif  // !_MSC_VER

ExampleMessage_StatusCode::ExampleMessage_StatusCode() {
  SharedCtor();
}

void ExampleMessage_StatusCode::InitAsDefaultInstance() {
}

ExampleMessage_StatusCode::ExampleMessage_StatusCode(const ExampleMessage_StatusCode& from) {
  SharedCtor();
  MergeFrom(from);
}

void ExampleMessage_StatusCode::SharedCtor() {
  _cached_size_ = 0;
  number_ = const_cast< ::std::string*>(&_default_number_);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExampleMessage_StatusCode::~ExampleMessage_StatusCode() {
  SharedDtor();
}

void ExampleMessage_StatusCode::SharedDtor() {
  if (number_ != &_default_number_) {
    delete number_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ExampleMessage_StatusCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExampleMessage_StatusCode_descriptor_;
}

const ExampleMessage_StatusCode& ExampleMessage_StatusCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageExample_2eproto();  return *default_instance_;
}

ExampleMessage_StatusCode* ExampleMessage_StatusCode::default_instance_ = NULL;

ExampleMessage_StatusCode* ExampleMessage_StatusCode::New() const {
  return new ExampleMessage_StatusCode;
}

void ExampleMessage_StatusCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (number_ != &_default_number_) {
        number_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExampleMessage_StatusCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_number()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->number().data(), this->number().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .Magic.Sensors.ExampleMessage.SensorType type = 2 [default = LIDAR];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::Magic::Sensors::ExampleMessage_SensorType_IsValid(value)) {
          set_type(static_cast< ::Magic::Sensors::ExampleMessage_SensorType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExampleMessage_StatusCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ExampleMessage_StatusCode::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string number = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->number(), output);
  }
  
  // optional .Magic.Sensors.ExampleMessage.SensorType type = 2 [default = LIDAR];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExampleMessage_StatusCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string number = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->number(), target);
  }
  
  // optional .Magic.Sensors.ExampleMessage.SensorType type = 2 [default = LIDAR];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExampleMessage_StatusCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }
    
    // optional .Magic.Sensors.ExampleMessage.SensorType type = 2 [default = LIDAR];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ExampleMessage_StatusCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExampleMessage_StatusCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExampleMessage_StatusCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExampleMessage_StatusCode::MergeFrom(const ExampleMessage_StatusCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_number(from.number());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExampleMessage_StatusCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExampleMessage_StatusCode::CopyFrom(const ExampleMessage_StatusCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExampleMessage_StatusCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ExampleMessage_StatusCode::Swap(ExampleMessage_StatusCode* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExampleMessage_StatusCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExampleMessage_StatusCode_descriptor_;
  metadata.reflection = ExampleMessage_StatusCode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string ExampleMessage::_default_robot_;
const ::std::string ExampleMessage::_default_name_;
#ifndef _MSC_VER
const int ExampleMessage::kRobotFieldNumber;
const int ExampleMessage::kIdFieldNumber;
const int ExampleMessage::kNameFieldNumber;
const int ExampleMessage::kCodesFieldNumber;
#endif  // !_MSC_VER

ExampleMessage::ExampleMessage() {
  SharedCtor();
}

void ExampleMessage::InitAsDefaultInstance() {
}

ExampleMessage::ExampleMessage(const ExampleMessage& from) {
  SharedCtor();
  MergeFrom(from);
}

void ExampleMessage::SharedCtor() {
  _cached_size_ = 0;
  robot_ = const_cast< ::std::string*>(&_default_robot_);
  id_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExampleMessage::~ExampleMessage() {
  SharedDtor();
}

void ExampleMessage::SharedDtor() {
  if (robot_ != &_default_robot_) {
    delete robot_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ExampleMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExampleMessage_descriptor_;
}

const ExampleMessage& ExampleMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageExample_2eproto();  return *default_instance_;
}

ExampleMessage* ExampleMessage::default_instance_ = NULL;

ExampleMessage* ExampleMessage::New() const {
  return new ExampleMessage;
}

void ExampleMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (robot_ != &_default_robot_) {
        robot_->clear();
      }
    }
    id_ = 0;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  codes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExampleMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string robot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_robot()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->robot().data(), this->robot().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_codes;
        break;
      }
      
      // repeated .Magic.Sensors.ExampleMessage.StatusCode codes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_codes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_codes()));
        if (input->ExpectTag(34)) goto parse_codes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExampleMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ExampleMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string robot = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot().data(), this->robot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->robot(), output);
  }
  
  // required int32 id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // repeated .Magic.Sensors.ExampleMessage.StatusCode codes = 4;
  for (int i = 0; i < this->codes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->codes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExampleMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string robot = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot().data(), this->robot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->robot(), target);
  }
  
  // required int32 id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // repeated .Magic.Sensors.ExampleMessage.StatusCode codes = 4;
  for (int i = 0; i < this->codes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->codes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExampleMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string robot = 1;
    if (has_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot());
    }
    
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .Magic.Sensors.ExampleMessage.StatusCode codes = 4;
  total_size += 1 * this->codes_size();
  for (int i = 0; i < this->codes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->codes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ExampleMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExampleMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExampleMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExampleMessage::MergeFrom(const ExampleMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  codes_.MergeFrom(from.codes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_robot(from.robot());
    }
    if (from._has_bit(1)) {
      set_id(from.id());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExampleMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExampleMessage::CopyFrom(const ExampleMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExampleMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < codes_size(); i++) {
    if (!this->codes(i).IsInitialized()) return false;
  }
  return true;
}

void ExampleMessage::Swap(ExampleMessage* other) {
  if (other != this) {
    std::swap(robot_, other->robot_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    codes_.Swap(&other->codes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExampleMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExampleMessage_descriptor_;
  metadata.reflection = ExampleMessage_reflection_;
  return metadata;
}


}  // namespace Sensors
}  // namespace Magic
