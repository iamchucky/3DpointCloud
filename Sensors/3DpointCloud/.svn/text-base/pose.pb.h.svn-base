// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_pose_2eproto__INCLUDED
#define PROTOBUF_pose_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

namespace Magic {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pose_2eproto();
void protobuf_AssignDesc_pose_2eproto();
void protobuf_ShutdownFile_pose_2eproto();

class Pose;

// ===================================================================

class Pose : public ::google::protobuf::Message {
 public:
  Pose();
  virtual ~Pose();
  
  Pose(const Pose& from);
  
  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();
  void Swap(Pose* other);
  
  // implements Message ----------------------------------------------
  
  Pose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);
  
  // required double yaw = 4;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 4;
  inline double yaw() const;
  inline void set_yaw(double value);
  
  // required double pitch = 5;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 5;
  inline double pitch() const;
  inline void set_pitch(double value);
  
  // required double roll = 6;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 6;
  inline double roll() const;
  inline void set_roll(double value);
  
  // required double timeStamp = 7;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 7;
  inline double timestamp() const;
  inline void set_timestamp(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double x_;
  double y_;
  double z_;
  double yaw_;
  double pitch_;
  double roll_;
  double timestamp_;
  friend void  protobuf_AddDesc_pose_2eproto();
  friend void protobuf_AssignDesc_pose_2eproto();
  friend void protobuf_ShutdownFile_pose_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Pose* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Pose

// required double x = 1;
inline bool Pose::has_x() const {
  return _has_bit(0);
}
inline void Pose::clear_x() {
  x_ = 0;
  _clear_bit(0);
}
inline double Pose::x() const {
  return x_;
}
inline void Pose::set_x(double value) {
  _set_bit(0);
  x_ = value;
}

// required double y = 2;
inline bool Pose::has_y() const {
  return _has_bit(1);
}
inline void Pose::clear_y() {
  y_ = 0;
  _clear_bit(1);
}
inline double Pose::y() const {
  return y_;
}
inline void Pose::set_y(double value) {
  _set_bit(1);
  y_ = value;
}

// required double z = 3;
inline bool Pose::has_z() const {
  return _has_bit(2);
}
inline void Pose::clear_z() {
  z_ = 0;
  _clear_bit(2);
}
inline double Pose::z() const {
  return z_;
}
inline void Pose::set_z(double value) {
  _set_bit(2);
  z_ = value;
}

// required double yaw = 4;
inline bool Pose::has_yaw() const {
  return _has_bit(3);
}
inline void Pose::clear_yaw() {
  yaw_ = 0;
  _clear_bit(3);
}
inline double Pose::yaw() const {
  return yaw_;
}
inline void Pose::set_yaw(double value) {
  _set_bit(3);
  yaw_ = value;
}

// required double pitch = 5;
inline bool Pose::has_pitch() const {
  return _has_bit(4);
}
inline void Pose::clear_pitch() {
  pitch_ = 0;
  _clear_bit(4);
}
inline double Pose::pitch() const {
  return pitch_;
}
inline void Pose::set_pitch(double value) {
  _set_bit(4);
  pitch_ = value;
}

// required double roll = 6;
inline bool Pose::has_roll() const {
  return _has_bit(5);
}
inline void Pose::clear_roll() {
  roll_ = 0;
  _clear_bit(5);
}
inline double Pose::roll() const {
  return roll_;
}
inline void Pose::set_roll(double value) {
  _set_bit(5);
  roll_ = value;
}

// required double timeStamp = 7;
inline bool Pose::has_timestamp() const {
  return _has_bit(6);
}
inline void Pose::clear_timestamp() {
  timestamp_ = 0;
  _clear_bit(6);
}
inline double Pose::timestamp() const {
  return timestamp_;
}
inline void Pose::set_timestamp(double value) {
  _set_bit(6);
  timestamp_ = value;
}


}  // namespace Proto
}  // namespace Magic

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_pose_2eproto__INCLUDED
