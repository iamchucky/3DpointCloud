// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_messageExample_2eproto__INCLUDED
#define PROTOBUF_messageExample_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

namespace Magic {
namespace Sensors {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messageExample_2eproto();
void protobuf_AssignDesc_messageExample_2eproto();
void protobuf_ShutdownFile_messageExample_2eproto();

class ExampleMessage;
class ExampleMessage_StatusCode;

enum ExampleMessage_SensorType {
  ExampleMessage_SensorType_LIDAR = 0,
  ExampleMessage_SensorType_RADAR = 1,
  ExampleMessage_SensorType_GPS = 2
};
bool ExampleMessage_SensorType_IsValid(int value);
const ExampleMessage_SensorType ExampleMessage_SensorType_SensorType_MIN = ExampleMessage_SensorType_LIDAR;
const ExampleMessage_SensorType ExampleMessage_SensorType_SensorType_MAX = ExampleMessage_SensorType_GPS;

const ::google::protobuf::EnumDescriptor* ExampleMessage_SensorType_descriptor();
inline const ::std::string& ExampleMessage_SensorType_Name(ExampleMessage_SensorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExampleMessage_SensorType_descriptor(), value);
}
inline bool ExampleMessage_SensorType_Parse(
    const ::std::string& name, ExampleMessage_SensorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExampleMessage_SensorType>(
    ExampleMessage_SensorType_descriptor(), name, value);
}
// ===================================================================

class ExampleMessage_StatusCode : public ::google::protobuf::Message {
 public:
  ExampleMessage_StatusCode();
  virtual ~ExampleMessage_StatusCode();
  
  ExampleMessage_StatusCode(const ExampleMessage_StatusCode& from);
  
  inline ExampleMessage_StatusCode& operator=(const ExampleMessage_StatusCode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExampleMessage_StatusCode& default_instance();
  void Swap(ExampleMessage_StatusCode* other);
  
  // implements Message ----------------------------------------------
  
  ExampleMessage_StatusCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExampleMessage_StatusCode& from);
  void MergeFrom(const ExampleMessage_StatusCode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  
  // optional .Magic.Sensors.ExampleMessage.SensorType type = 2 [default = LIDAR];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Magic::Sensors::ExampleMessage_SensorType type() const;
  inline void set_type(::Magic::Sensors::ExampleMessage_SensorType value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* number_;
  static const ::std::string _default_number_;
  int type_;
  friend void  protobuf_AddDesc_messageExample_2eproto();
  friend void protobuf_AssignDesc_messageExample_2eproto();
  friend void protobuf_ShutdownFile_messageExample_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ExampleMessage_StatusCode* default_instance_;
};
// -------------------------------------------------------------------

class ExampleMessage : public ::google::protobuf::Message {
 public:
  ExampleMessage();
  virtual ~ExampleMessage();
  
  ExampleMessage(const ExampleMessage& from);
  
  inline ExampleMessage& operator=(const ExampleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExampleMessage& default_instance();
  void Swap(ExampleMessage* other);
  
  // implements Message ----------------------------------------------
  
  ExampleMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExampleMessage& from);
  void MergeFrom(const ExampleMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ExampleMessage_StatusCode StatusCode;
  
  typedef ExampleMessage_SensorType SensorType;
  static const SensorType LIDAR = ExampleMessage_SensorType_LIDAR;
  static const SensorType RADAR = ExampleMessage_SensorType_RADAR;
  static const SensorType GPS = ExampleMessage_SensorType_GPS;
  static inline bool SensorType_IsValid(int value) {
    return ExampleMessage_SensorType_IsValid(value);
  }
  static const SensorType SensorType_MIN =
    ExampleMessage_SensorType_SensorType_MIN;
  static const SensorType SensorType_MAX =
    ExampleMessage_SensorType_SensorType_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  SensorType_descriptor() {
    return ExampleMessage_SensorType_descriptor();
  }
  static inline const ::std::string& SensorType_Name(SensorType value) {
    return ExampleMessage_SensorType_Name(value);
  }
  static inline bool SensorType_Parse(const ::std::string& name,
      SensorType* value) {
    return ExampleMessage_SensorType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string robot = 1;
  inline bool has_robot() const;
  inline void clear_robot();
  static const int kRobotFieldNumber = 1;
  inline const ::std::string& robot() const;
  inline void set_robot(const ::std::string& value);
  inline void set_robot(const char* value);
  inline void set_robot(const char* value, size_t size);
  inline ::std::string* mutable_robot();
  
  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // repeated .Magic.Sensors.ExampleMessage.StatusCode codes = 4;
  inline int codes_size() const;
  inline void clear_codes();
  static const int kCodesFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::Magic::Sensors::ExampleMessage_StatusCode >& codes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Magic::Sensors::ExampleMessage_StatusCode >* mutable_codes();
  inline const ::Magic::Sensors::ExampleMessage_StatusCode& codes(int index) const;
  inline ::Magic::Sensors::ExampleMessage_StatusCode* mutable_codes(int index);
  inline ::Magic::Sensors::ExampleMessage_StatusCode* add_codes();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* robot_;
  static const ::std::string _default_robot_;
  ::google::protobuf::int32 id_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::RepeatedPtrField< ::Magic::Sensors::ExampleMessage_StatusCode > codes_;
  friend void  protobuf_AddDesc_messageExample_2eproto();
  friend void protobuf_AssignDesc_messageExample_2eproto();
  friend void protobuf_ShutdownFile_messageExample_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ExampleMessage* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// ExampleMessage_StatusCode

// required string number = 1;
inline bool ExampleMessage_StatusCode::has_number() const {
  return _has_bit(0);
}
inline void ExampleMessage_StatusCode::clear_number() {
  if (number_ != &_default_number_) {
    number_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ExampleMessage_StatusCode::number() const {
  return *number_;
}
inline void ExampleMessage_StatusCode::set_number(const ::std::string& value) {
  _set_bit(0);
  if (number_ == &_default_number_) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void ExampleMessage_StatusCode::set_number(const char* value) {
  _set_bit(0);
  if (number_ == &_default_number_) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void ExampleMessage_StatusCode::set_number(const char* value, size_t size) {
  _set_bit(0);
  if (number_ == &_default_number_) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExampleMessage_StatusCode::mutable_number() {
  _set_bit(0);
  if (number_ == &_default_number_) {
    number_ = new ::std::string;
  }
  return number_;
}

// optional .Magic.Sensors.ExampleMessage.SensorType type = 2 [default = LIDAR];
inline bool ExampleMessage_StatusCode::has_type() const {
  return _has_bit(1);
}
inline void ExampleMessage_StatusCode::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::Magic::Sensors::ExampleMessage_SensorType ExampleMessage_StatusCode::type() const {
  return static_cast< ::Magic::Sensors::ExampleMessage_SensorType >(type_);
}
inline void ExampleMessage_StatusCode::set_type(::Magic::Sensors::ExampleMessage_SensorType value) {
  GOOGLE_DCHECK(::Magic::Sensors::ExampleMessage_SensorType_IsValid(value));
  _set_bit(1);
  type_ = value;
}

// -------------------------------------------------------------------

// ExampleMessage

// required string robot = 1;
inline bool ExampleMessage::has_robot() const {
  return _has_bit(0);
}
inline void ExampleMessage::clear_robot() {
  if (robot_ != &_default_robot_) {
    robot_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ExampleMessage::robot() const {
  return *robot_;
}
inline void ExampleMessage::set_robot(const ::std::string& value) {
  _set_bit(0);
  if (robot_ == &_default_robot_) {
    robot_ = new ::std::string;
  }
  robot_->assign(value);
}
inline void ExampleMessage::set_robot(const char* value) {
  _set_bit(0);
  if (robot_ == &_default_robot_) {
    robot_ = new ::std::string;
  }
  robot_->assign(value);
}
inline void ExampleMessage::set_robot(const char* value, size_t size) {
  _set_bit(0);
  if (robot_ == &_default_robot_) {
    robot_ = new ::std::string;
  }
  robot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExampleMessage::mutable_robot() {
  _set_bit(0);
  if (robot_ == &_default_robot_) {
    robot_ = new ::std::string;
  }
  return robot_;
}

// required int32 id = 2;
inline bool ExampleMessage::has_id() const {
  return _has_bit(1);
}
inline void ExampleMessage::clear_id() {
  id_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 ExampleMessage::id() const {
  return id_;
}
inline void ExampleMessage::set_id(::google::protobuf::int32 value) {
  _set_bit(1);
  id_ = value;
}

// optional string name = 3;
inline bool ExampleMessage::has_name() const {
  return _has_bit(2);
}
inline void ExampleMessage::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& ExampleMessage::name() const {
  return *name_;
}
inline void ExampleMessage::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ExampleMessage::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ExampleMessage::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExampleMessage::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// repeated .Magic.Sensors.ExampleMessage.StatusCode codes = 4;
inline int ExampleMessage::codes_size() const {
  return codes_.size();
}
inline void ExampleMessage::clear_codes() {
  codes_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Magic::Sensors::ExampleMessage_StatusCode >&
ExampleMessage::codes() const {
  return codes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Magic::Sensors::ExampleMessage_StatusCode >*
ExampleMessage::mutable_codes() {
  return &codes_;
}
inline const ::Magic::Sensors::ExampleMessage_StatusCode& ExampleMessage::codes(int index) const {
  return codes_.Get(index);
}
inline ::Magic::Sensors::ExampleMessage_StatusCode* ExampleMessage::mutable_codes(int index) {
  return codes_.Mutable(index);
}
inline ::Magic::Sensors::ExampleMessage_StatusCode* ExampleMessage::add_codes() {
  return codes_.Add();
}


}  // namespace Sensors
}  // namespace Magic

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Magic::Sensors::ExampleMessage_SensorType>() {
  return ::Magic::Sensors::ExampleMessage_SensorType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_messageExample_2eproto__INCLUDED
